name: Backend CI

# Run on pushes to the main branch and any pull requests targeting main
on:
  push:
    branches: [ master ] # Changed from main based on your repo having 'master'
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'requirements*.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ master ] # Changed from main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'requirements*.txt'
      - 'pyproject.toml'

jobs:
  build-and-test:
    # Use the latest stable Ubuntu runner
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Specify the Python version(s) to test against
        python-version: ['3.11'] # Or your project's target Python version

    steps:
    # 1. Check out the repository code
    - uses: actions/checkout@v4

    # 2. Set up the specified Python version
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # 3. Install project dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Install main dependencies
        # Install dev dependencies needed for checks
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Also install backend-specific requirements if separate
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

    # 4. Run Linting checks
    - name: Lint with Ruff
      run: |
        ruff check backend/

    # 5. Run Formatting checks (ensure code *is* formatted)
    - name: Check Formatting with Ruff
      run: |
        ruff format --check backend/

    # 6. Run Type Checking
    - name: Type Check with Mypy
      run: |
        mypy backend/

    # 7. Run Tests and Coverage
    - name: Test with Pytest
      run: |
        # Run tests, report coverage, target backend code/tests
        pytest --cov=backend --cov-report=xml backend/tests/

    # Optional: Upload coverage report to a service like Codecov
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   # Needs further configuration (token, etc.) if used 